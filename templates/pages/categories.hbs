<div class="text-center mb-8">
    <h1 class="text-2xl font-semibold text-primary mb-2">Browse by Category</h1>
    <p class="text-secondary">Find your next adventure in {{categories.length}} different worlds</p>
</div>

<div class="flex justify-between items-center mb-8 gap-4">
    <div class="flex-1">
        <input type="text" id="searchInput" class="w-full px-3 py-2 border border-border rounded-lg bg-white shadow-card focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/10" placeholder="Search categories...">
    </div>
    <div>
        <select id="sortBy" class="px-3 py-2 border border-gray-200 rounded-lg bg-white cursor-pointer appearance-none bg-no-repeat bg-right pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors" style="background-image: url('data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 24 24%27 stroke-width=%272%27 stroke=%27%239ca3af%27%3e%3cpath stroke-linecap=%27round%27 stroke-linejoin=%27round%27 d=%27m19 9-7 7-7-7%27/%3e%3c/svg%3e'); background-size: 16px 16px; background-position: right 12px center;">
            <option value="count">Sort by Count</option>
            <option value="name">Sort by Name</option>
        </select>
    </div>
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="categoriesGrid">
    {{#each categories}}
    <div class="bg-white rounded-lg p-6 text-center shadow-card transition-all hover:shadow-card-hover hover:-translate-y-0.5" data-category="{{name}}" data-count="{{count}}">
        <a href="categories/{{slug}}.html" class="no-underline text-inherit">
            <div class="mb-3 flex justify-center">
                <svg class="w-12 h-12 {{categoryText}}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
            </div>
            <h3 class="text-primary mb-2">{{name}}</h3>
            <p class="text-secondary text-sm">{{count}} books</p>
        </a>
    </div>
    {{/each}}
</div>

<script>
// Categories page functionality
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const sortBy = document.getElementById('sortBy');
    const categoriesGrid = document.getElementById('categoriesGrid');
    
    function filterAndSortCategories() {
        const searchTerm = searchInput.value.toLowerCase();
        const sortValue = sortBy.value;
        const categoryItems = Array.from(document.querySelectorAll('[data-category]'));
        
        // Filter categories
        categoryItems.forEach(item => {
            const categoryName = item.querySelector('h3').textContent.toLowerCase();
            const shouldShow = categoryName.includes(searchTerm);
            item.style.display = shouldShow ? 'block' : 'none';
        });
        
        // Sort categories
        const visibleItems = categoryItems.filter(item => item.style.display !== 'none');
        visibleItems.sort((a, b) => {
            let aValue, bValue;
            
            switch (sortValue) {
                case 'name':
                    aValue = a.querySelector('h3').textContent.toLowerCase();
                    bValue = b.querySelector('h3').textContent.toLowerCase();
                    break;
                case 'count':
                    aValue = parseInt(a.dataset.count);
                    bValue = parseInt(b.dataset.count);
                    // Sort descending (highest to lowest)
                    if (aValue > bValue) return -1;
                    if (aValue < bValue) return 1;
                    return 0;
                default:
                    return 0;
            }
            
            // Only apply default sorting for name (alphabetical)
            if (sortValue === 'name') {
                if (aValue < bValue) return -1;
                if (aValue > bValue) return 1;
                return 0;
            }
        });
        
        // Reorder DOM elements
        visibleItems.forEach(item => categoriesGrid.appendChild(item));
    }
    
    if (searchInput) searchInput.addEventListener('input', filterAndSortCategories);
    if (sortBy) sortBy.addEventListener('change', filterAndSortCategories);

    // Initial render
    filterAndSortCategories();
});
</script>
