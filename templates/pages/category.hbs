<div class="category-header">
    <h1>{{categoryName}}</h1>
    <p>{{books.length}} books in this category</p>
</div>

<div class="index-controls">
    <div class="search-box">
        <input type="text" id="searchInput" placeholder="Search books in {{categoryName}}...">
    </div>
    <div class="sort-controls">
        <select id="sortBy">
            <option value="title">Sort by Title</option>
            <option value="author">Sort by Author</option>
        </select>
    </div>
</div>

<div class="books-grid">
    {{#each books}}
    {{> book-card this basePath=../basePath isAuthors=../isAuthors isCategories=../isCategories}}
    {{/each}}
</div>

<script>
// Book filtering and sorting functionality
function displayBooks() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const bookCards = document.querySelectorAll('.book-card');
    let visibleCount = 0;
    
    bookCards.forEach(card => {
        const title = card.querySelector('.book-title').textContent.toLowerCase();
        const author = card.querySelector('.book-author').textContent.toLowerCase();
        
        const matchesSearch = title.includes(searchTerm) || author.includes(searchTerm);
        card.style.display = matchesSearch ? 'block' : 'none';
        
        if (matchesSearch) visibleCount++;
    });
}

function sortBooks() {
    const sortBy = document.getElementById('sortBy').value;
    const bookCards = Array.from(document.querySelectorAll('.book-card'));
    const booksGrid = document.querySelector('.books-grid');
    
    bookCards.sort((a, b) => {
        switch (sortBy) {
            case 'title':
                const aTitle = a.querySelector('.book-title').textContent.toLowerCase();
                const bTitle = b.querySelector('.book-title').textContent.toLowerCase();
                return aTitle.localeCompare(bTitle);
            case 'author':
                // Extract author names from "by Author Name" format
                const aAuthor = a.querySelector('.book-author').textContent.replace('by ', '').trim();
                const bAuthor = b.querySelector('.book-author').textContent.replace('by ', '').trim();
                // Split into first and last name
                const [aFirst, ...aLast] = aAuthor.split(' ');
                const [bFirst, ...bLast] = bAuthor.split(' ');
                // Compare last names first, then first names
                const aLastName = aLast.join(' ').toLowerCase();
                const bLastName = bLast.join(' ').toLowerCase();
                if (aLastName !== bLastName) {
                    return aLastName.localeCompare(bLastName);
                }
                return aFirst.toLowerCase().localeCompare(bFirst.toLowerCase());
            default:
                return 0;
        }
    });
    
    // Reorder DOM elements
    bookCards.forEach(card => booksGrid.appendChild(card));
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const sortBy = document.getElementById('sortBy');
    
    if (searchInput) searchInput.addEventListener('input', displayBooks);
    if (sortBy) sortBy.addEventListener('change', sortBooks);
    
    // Initial display
    displayBooks();
});
</script>
