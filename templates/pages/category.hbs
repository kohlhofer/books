<style>
    body {
        background: {{categoryBg}} !important;
    }
</style>

<div class="text-center mb-6 sm:mb-8">
    <div class="mb-3 flex justify-center">
        <svg class="w-12 h-12 sm:w-16 sm:h-16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: {{categoryText}};">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>
    </div>
    <h1 class="text-xl sm:text-2xl font-semibold text-primary mb-2">{{categoryName}}</h1>
    <p class="text-secondary text-base sm:text-lg">{{books.length}} books in this category</p>
</div>

<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 sm:mb-8 gap-4">
    <div class="flex-1 w-full">
        <input type="text" id="searchInput" class="w-full px-3 py-2 border border-border rounded-lg bg-white shadow-card focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/10" placeholder="Search books in {{categoryName}}...">
    </div>
    <div class="w-full sm:w-auto">
        <select id="sortBy" class="w-full sm:w-auto px-3 py-2 border border-gray-200 rounded-lg bg-white cursor-pointer appearance-none bg-no-repeat bg-right pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors" style="background-image: url('data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 24 24%27 stroke-width=%272%27 stroke=%27%239ca3af%27%3e%3cpath stroke-linecap=%27round%27 stroke-linejoin=%27round%27 d=%27m19 9-7 7-7-7%27/%3e%3c/svg%3e'); background-size: 16px 16px; background-position: right 12px center;">
            <option value="author">Sort by Author</option>
            <option value="title">Sort by Title</option>
        </select>
    </div>
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8 mb-8">
    {{#each books}}
    {{> book-card this basePath=../basePath isAuthors=../isAuthors isCategories=../isCategories}}
    {{/each}}
</div>

<script>
// Book filtering and sorting functionality
function displayBooks() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const bookCards = Array.from(document.querySelectorAll('.grid > div'));
    let visibleCount = 0;
    
    bookCards.forEach(card => {
        const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
        const author = card.querySelector('p')?.textContent?.toLowerCase() || '';
        
        const matchesSearch = title.includes(searchTerm) || author.includes(searchTerm);
        card.style.display = matchesSearch ? 'block' : 'none';
        
        if (matchesSearch) visibleCount++;
    });
}

function sortBooks() {
    const sortBy = document.getElementById('sortBy').value;
    const bookCards = Array.from(document.querySelectorAll('.grid > div'));
    const booksGrid = document.querySelector('.grid');
    
    bookCards.sort((a, b) => {
        switch (sortBy) {
            case 'title':
                const aTitle = a.querySelector('h3')?.textContent?.toLowerCase() || '';
                const bTitle = b.querySelector('h3')?.textContent?.toLowerCase() || '';
                return aTitle.localeCompare(bTitle);
            case 'author':
                // Extract author names from "by Author Name" format
                const aAuthor = a.querySelector('p')?.textContent?.replace('by ', '').trim() || '';
                const bAuthor = b.querySelector('p')?.textContent?.replace('by ', '').trim() || '';
                // Split into first and last name
                const [aFirst, ...aLast] = aAuthor.split(' ');
                const [bFirst, ...bLast] = bAuthor.split(' ');
                // Compare last names first, then first names
                const aLastName = aLast.join(' ').toLowerCase();
                const bLastName = bLast.join(' ').toLowerCase();
                if (aLastName !== bLastName) {
                    return aLastName.localeCompare(bLastName);
                }
                return aFirst.toLowerCase().localeCompare(bFirst.toLowerCase());
            default:
                return 0;
        }
    });
    
    // Reorder DOM elements
    bookCards.forEach(card => booksGrid.appendChild(card));
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const sortBy = document.getElementById('sortBy');
    
    if (searchInput) searchInput.addEventListener('input', displayBooks);
    if (sortBy) sortBy.addEventListener('change', sortBooks);
    
    // Initial display and sort by author (default)
    displayBooks();
    sortBooks(); // This will sort by author since it's the first option
});
</script>
