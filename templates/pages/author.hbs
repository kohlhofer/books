<div class="text-center mb-8">
    <h1 class="text-primary mb-2">{{authorName}}</h1>
    <p class="text-secondary text-lg">{{books.length}} books by this author</p>
</div>

<div class="flex justify-between items-center mb-8 gap-4">
    <div class="flex-1">
        <input type="text" id="searchInput" class="w-full px-3 py-2 border border-border rounded-lg bg-white shadow-card focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/10" placeholder="Search books by {{authorName}}...">
    </div>
    <div>
        <select id="sortBy" class="px-3 py-2 border border-border rounded-md bg-white shadow-card cursor-pointer appearance-none bg-no-repeat bg-right pr-8">
            <option value="title">Sort by Title</option>
        </select>
    </div>
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 mb-8">
    {{#each books}}
    {{> book-card this basePath=../basePath isAuthors=../isAuthors isCategories=../isCategories}}
    {{/each}}
</div>

<script>
// Book filtering and sorting functionality
function displayBooks() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const bookCards = document.querySelectorAll('.book-card');
    let visibleCount = 0;
    
    bookCards.forEach(card => {
        const title = card.querySelector('.book-title').textContent.toLowerCase();
        const category = card.querySelector('.book-category').textContent.toLowerCase();
        
        const matchesSearch = title.includes(searchTerm) || category.includes(searchTerm);
        card.style.display = matchesSearch ? 'block' : 'none';
        
        if (matchesSearch) visibleCount++;
    });
}

function sortBooks() {
    const sortBy = document.getElementById('sortBy').value;
    const bookCards = Array.from(document.querySelectorAll('.book-card'));
    const booksGrid = document.querySelector('.books-grid');
    
    bookCards.sort((a, b) => {
        const aTitle = a.querySelector('.book-title').textContent.toLowerCase();
        const bTitle = b.querySelector('.book-title').textContent.toLowerCase();
        return aTitle.localeCompare(bTitle);
    });
    
    // Reorder DOM elements
    bookCards.forEach(card => booksGrid.appendChild(card));
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const sortBy = document.getElementById('sortBy');
    
    if (searchInput) searchInput.addEventListener('input', displayBooks);
    if (sortBy) sortBy.addEventListener('change', sortBooks);
    
    // Initial display
    displayBooks();
});
</script>
